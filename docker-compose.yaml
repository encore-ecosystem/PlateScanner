services:
  app:
    build: ./app
    container_name: plate_scanner_service

  minio:
    container_name: minio
    image: minio/minio:latest
    volumes:
      - ./mlops/minio_data:/data
    ports:
      - "9000:9000"
    restart: always
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-client:
    container_name: minio-client
    restart: always
    image: minio/mc:latest
    volumes:
      - ./mlops/config:/root/.mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host rm minio;
      /usr/bin/mc config host add --quiet --api s3v4 minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};    
      sleep infinity;
      "

  mlflow_database:
#    restart: always
    image: postgres:17
    container_name: mlflow_database
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./mlops/dbdata:/var/lib/mysql

  mlflow:
    restart: always
    build: ./mlops/mlflow
    container_name: mlflow
    depends_on:
      - minio-client
      - mlflow_database
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
    command: [
      "mlflow", "server",
      "--backend-store-uri", "mlflow_database://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_DB}:5432/mlflow",
      "--default-artifact-root", "/mlflow/artifacts",
      "--host", "0.0.0.0"
    ]
