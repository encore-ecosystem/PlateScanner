services:
  app:
    build: ./app
    container_name: plate_scanner_service

  minio:
    container_name: minio
    image: minio/minio:latest
    volumes:
      - ./mlops/minio_data:/data
    ports:
      - "9000:9000"
    networks:
      - minio_network
    restart: always
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    command: server /data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-client:
    container_name: minio-client
    restart: always
    image: minio/mc:latest
    volumes:
      - ./mlops/config:/root/.mc
    depends_on:
      - minio
    networks:
      - minio_network
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host rm minio;
      /usr/bin/mc config host add --quiet --api s3v4 minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};    
      sleep infinity;
      "

  db:
    restart: always
    image: mysql/mysql-server:latest
    container_name: mlflow_db
    ports:
      - "3306:3306"
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./mlflow/dbdata:/var/lib/mysql

  web:
    restart: always
    build: ../mlops/mlflow
    container_name: mlflow_server
    depends_on:
      - minio-client
      - db
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: mlflow server --backend-store-uri mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE} --default-artifact-root s3://mlflow/ --host 0.0.0.0


networks:
  minio_network: